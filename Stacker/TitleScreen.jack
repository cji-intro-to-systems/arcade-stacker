/** Implements the title screen */
 class TitleScreen {

 	field int nLetters; // number of letters
 	field int nRows, rowPixels, colPixels;
 	field int rowOffset, colOffset;
 	field int waitTime; // stagger drawing of letters

	constructor TitleScreen new() {
		let nLetters = 7;
		let nRows = 80;
		let rowPixels = 32;
		let colPixels = 16;
		let rowOffset = nRows*rowPixels;
		let colOffset = 9;
		let waitTime = 50;

		// draw letters
		do drawS(rowOffset + colOffset);
		do Sys.wait(waitTime);
		do drawT(rowOffset + colOffset + 2);
		do Sys.wait(waitTime);
		do drawA(rowOffset + colOffset + 4);
		do Sys.wait(waitTime);
		do drawC(rowOffset + colOffset + 6);
		do Sys.wait(waitTime);
		do drawK(rowOffset + colOffset + 8);
		do Sys.wait(waitTime);
		do drawE(rowOffset + colOffset + 10);
		do Sys.wait(waitTime);
		do drawR(rowOffset + colOffset + 12);
		do Sys.wait(waitTime);
		do Output.moveCursor(11, 21);
		do Output.printString("Press any key to begin");
		return this;
	}

	/** Show title screen until any key is pressed **/
	method void run() {
		var char keyPressed;
		var int x;

		while (true) {

			while (keyPressed = 0) {
				let keyPressed = Keyboard.keyPressed();
			}

			while (~(keyPressed = 0)) {
	            let keyPressed = Keyboard.keyPressed();
	        }

	        // Erase the tittle
	        do Screen.setColor(false);
	        do Screen.drawRectangle(colOffset*colPixels , nRows, 
	        	(colOffset*colPixels) + (nLetters*rowPixels), nRows + 64);
	        return;
		}
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
   	}

   	/** Subsequent methods draw letters on the screen **/
	method void drawS(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 31);
		do Memory.poke(memAddress +128, 31);
		do Memory.poke(memAddress +160, 31);
		do Memory.poke(memAddress +192, 31);
		do Memory.poke(memAddress +224, 31);
		do Memory.poke(memAddress +256, 31);
		do Memory.poke(memAddress +288, 31);
		do Memory.poke(memAddress +320, 31);
		do Memory.poke(memAddress +352, 31);
		do Memory.poke(memAddress +384, 31);
		do Memory.poke(memAddress +416, 31);
		do Memory.poke(memAddress +448, -1);
		do Memory.poke(memAddress +480, -1);
		do Memory.poke(memAddress +512, -1);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, 1023);
		do Memory.poke(memAddress +33, 1023);
		do Memory.poke(memAddress +65, 1023);
		do Memory.poke(memAddress +449, 1023);
		do Memory.poke(memAddress +481, 1023);
		do Memory.poke(memAddress +513, 1023);
		do Memory.poke(memAddress +545, 992);
		do Memory.poke(memAddress +577, 992);
		do Memory.poke(memAddress +609, 992);
		do Memory.poke(memAddress +641, 992);
		do Memory.poke(memAddress +673, 992);
		do Memory.poke(memAddress +705, 992);
		do Memory.poke(memAddress +737, 992);
		do Memory.poke(memAddress +769, 992);
		do Memory.poke(memAddress +801, 992);
		do Memory.poke(memAddress +833, 992);
		do Memory.poke(memAddress +865, 992);
		do Memory.poke(memAddress +897, 992);
		do Memory.poke(memAddress +929, 1023);
		do Memory.poke(memAddress +961, 1023);
		do Memory.poke(memAddress +993, 1023);
		return;
   }

   method void drawT(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, -2048);
		do Memory.poke(memAddress +128, -2048);
		do Memory.poke(memAddress +160, -2048);
		do Memory.poke(memAddress +192, -2048);
		do Memory.poke(memAddress +224, -2048);
		do Memory.poke(memAddress +256, -2048);
		do Memory.poke(memAddress +288, -2048);
		do Memory.poke(memAddress +320, -2048);
		do Memory.poke(memAddress +352, -2048);
		do Memory.poke(memAddress +384, -2048);
		do Memory.poke(memAddress +416, -2048);
		do Memory.poke(memAddress +448, -2048);
		do Memory.poke(memAddress +480, -2048);
		do Memory.poke(memAddress +512, -2048);
		do Memory.poke(memAddress +544, -2048);
		do Memory.poke(memAddress +576, -2048);
		do Memory.poke(memAddress +608, -2048);
		do Memory.poke(memAddress +640, -2048);
		do Memory.poke(memAddress +672, -2048);
		do Memory.poke(memAddress +704, -2048);
		do Memory.poke(memAddress +736, -2048);
		do Memory.poke(memAddress +768, -2048);
		do Memory.poke(memAddress +800, -2048);
		do Memory.poke(memAddress +832, -2048);
		do Memory.poke(memAddress +864, -2048);
		do Memory.poke(memAddress +896, -2048);
		do Memory.poke(memAddress +928, -2048);
		do Memory.poke(memAddress +960, -2048);
		do Memory.poke(memAddress +992, -2048);
		// column 1
		do Memory.poke(memAddress +1, 2047);
		do Memory.poke(memAddress +33, 2047);
		do Memory.poke(memAddress +65, 2047);
		return;
	}

	method void drawA(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, -1);
		do Memory.poke(memAddress +128, 31);
		do Memory.poke(memAddress +160, 31);
		do Memory.poke(memAddress +192, 31);
		do Memory.poke(memAddress +224, 31);
		do Memory.poke(memAddress +256, 31);
		do Memory.poke(memAddress +288, 31);
		do Memory.poke(memAddress +320, 31);
		do Memory.poke(memAddress +352, 31);
		do Memory.poke(memAddress +384, 31);
		do Memory.poke(memAddress +416, -1);
		do Memory.poke(memAddress +448, -1);
		do Memory.poke(memAddress +480, -1);
		do Memory.poke(memAddress +512, 31);
		do Memory.poke(memAddress +544, 31);
		do Memory.poke(memAddress +576, 31);
		do Memory.poke(memAddress +608, 31);
		do Memory.poke(memAddress +640, 31);
		do Memory.poke(memAddress +672, 31);
		do Memory.poke(memAddress +704, 31);
		do Memory.poke(memAddress +736, 31);
		do Memory.poke(memAddress +768, 31);
		do Memory.poke(memAddress +800, 31);
		do Memory.poke(memAddress +832, 31);
		do Memory.poke(memAddress +864, 31);
		do Memory.poke(memAddress +896, 31);
		do Memory.poke(memAddress +928, 31);
		do Memory.poke(memAddress +960, 31);
		do Memory.poke(memAddress +992, 31);
		// column 1
		do Memory.poke(memAddress +1, 255);
		do Memory.poke(memAddress +33, 255);
		do Memory.poke(memAddress +65, 255);
		do Memory.poke(memAddress +97, 255);
		do Memory.poke(memAddress +129, 248);
		do Memory.poke(memAddress +161, 248);
		do Memory.poke(memAddress +193, 248);
		do Memory.poke(memAddress +225, 248);
		do Memory.poke(memAddress +257, 248);
		do Memory.poke(memAddress +289, 248);
		do Memory.poke(memAddress +321, 248);
		do Memory.poke(memAddress +353, 248);
		do Memory.poke(memAddress +385, 248);
		do Memory.poke(memAddress +417, 255);
		do Memory.poke(memAddress +449, 255);
		do Memory.poke(memAddress +481, 255);
		do Memory.poke(memAddress +513, 248);
		do Memory.poke(memAddress +545, 248);
		do Memory.poke(memAddress +577, 248);
		do Memory.poke(memAddress +609, 248);
		do Memory.poke(memAddress +641, 248);
		do Memory.poke(memAddress +673, 248);
		do Memory.poke(memAddress +705, 248);
		do Memory.poke(memAddress +737, 248);
		do Memory.poke(memAddress +769, 248);
		do Memory.poke(memAddress +801, 248);
		do Memory.poke(memAddress +833, 248);
		do Memory.poke(memAddress +865, 248);
		do Memory.poke(memAddress +897, 248);
		do Memory.poke(memAddress +929, 248);
		do Memory.poke(memAddress +961, 248);
		do Memory.poke(memAddress +993, 248);
		return;
	}

	method void drawC(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, -1);
		do Memory.poke(memAddress +128, 31);
		do Memory.poke(memAddress +160, 31);
		do Memory.poke(memAddress +192, 31);
		do Memory.poke(memAddress +224, 31);
		do Memory.poke(memAddress +256, 31);
		do Memory.poke(memAddress +288, 31);
		do Memory.poke(memAddress +320, 31);
		do Memory.poke(memAddress +352, 31);
		do Memory.poke(memAddress +384, 31);
		do Memory.poke(memAddress +416, 31);
		do Memory.poke(memAddress +448, 31);
		do Memory.poke(memAddress +480, 31);
		do Memory.poke(memAddress +512, 31);
		do Memory.poke(memAddress +544, 31);
		do Memory.poke(memAddress +576, 31);
		do Memory.poke(memAddress +608, 31);
		do Memory.poke(memAddress +640, 31);
		do Memory.poke(memAddress +672, 31);
		do Memory.poke(memAddress +704, 31);
		do Memory.poke(memAddress +736, 31);
		do Memory.poke(memAddress +768, 31);
		do Memory.poke(memAddress +800, 31);
		do Memory.poke(memAddress +832, 31);
		do Memory.poke(memAddress +864, 31);
		do Memory.poke(memAddress +896, -1);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, 511);
		do Memory.poke(memAddress +33, 511);
		do Memory.poke(memAddress +65, 511);
		do Memory.poke(memAddress +97, 511);
		do Memory.poke(memAddress +897, 511);
		do Memory.poke(memAddress +929, 511);
		do Memory.poke(memAddress +961, 511);
		do Memory.poke(memAddress +993, 511);
		return;
	}

	method void drawK(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, 31);
		do Memory.poke(memAddress +32, 31);
		do Memory.poke(memAddress +64, 31);
		do Memory.poke(memAddress +96, 31);
		do Memory.poke(memAddress +128, 31);
		do Memory.poke(memAddress +160, 31);
		do Memory.poke(memAddress +192, 31);
		do Memory.poke(memAddress +224, 31);
		do Memory.poke(memAddress +256, 31);
		do Memory.poke(memAddress +288, 31);
		do Memory.poke(memAddress +320, 31);
		do Memory.poke(memAddress +352, 31);
		do Memory.poke(memAddress +384, 31);
		do Memory.poke(memAddress +416, 31);
		do Memory.poke(memAddress +448, -1);
		do Memory.poke(memAddress +480, -1);
		do Memory.poke(memAddress +512, -1);
		do Memory.poke(memAddress +544, 31);
		do Memory.poke(memAddress +576, 31);
		do Memory.poke(memAddress +608, 31);
		do Memory.poke(memAddress +640, 31);
		do Memory.poke(memAddress +672, 31);
		do Memory.poke(memAddress +704, 31);
		do Memory.poke(memAddress +736, 31);
		do Memory.poke(memAddress +768, 31);
		do Memory.poke(memAddress +800, 31);
		do Memory.poke(memAddress +832, 31);
		do Memory.poke(memAddress +864, 31);
		do Memory.poke(memAddress +896, 31);
		do Memory.poke(memAddress +928, 31);
		do Memory.poke(memAddress +960, 31);
		do Memory.poke(memAddress +992, 31);
		// column 1
		do Memory.poke(memAddress +1, 992);
		do Memory.poke(memAddress +33, 992);
		do Memory.poke(memAddress +65, 992);
		do Memory.poke(memAddress +97, 992);
		do Memory.poke(memAddress +129, 992);
		do Memory.poke(memAddress +161, 992);
		do Memory.poke(memAddress +193, 992);
		do Memory.poke(memAddress +225, 992);
		do Memory.poke(memAddress +257, 992);
		do Memory.poke(memAddress +289, 992);
		do Memory.poke(memAddress +321, 992);
		do Memory.poke(memAddress +353, 992);
		do Memory.poke(memAddress +385, 992);
		do Memory.poke(memAddress +417, 496);
		do Memory.poke(memAddress +449, 255);
		do Memory.poke(memAddress +481, 127);
		do Memory.poke(memAddress +513, 255);
		do Memory.poke(memAddress +545, 496);
		do Memory.poke(memAddress +577, 992);
		do Memory.poke(memAddress +609, 992);
		do Memory.poke(memAddress +641, 992);
		do Memory.poke(memAddress +673, 992);
		do Memory.poke(memAddress +705, 992);
		do Memory.poke(memAddress +737, 992);
		do Memory.poke(memAddress +769, 992);
		do Memory.poke(memAddress +801, 992);
		do Memory.poke(memAddress +833, 992);
		do Memory.poke(memAddress +865, 992);
		do Memory.poke(memAddress +897, 992);
		do Memory.poke(memAddress +929, 992);
		do Memory.poke(memAddress +961, 992);
		do Memory.poke(memAddress +993, 992);
		return;
	}

	method void drawE(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 31);
		do Memory.poke(memAddress +128, 31);
		do Memory.poke(memAddress +160, 31);
		do Memory.poke(memAddress +192, 31);
		do Memory.poke(memAddress +224, 31);
		do Memory.poke(memAddress +256, 31);
		do Memory.poke(memAddress +288, 31);
		do Memory.poke(memAddress +320, 31);
		do Memory.poke(memAddress +352, 31);
		do Memory.poke(memAddress +384, 31);
		do Memory.poke(memAddress +416, 31);
		do Memory.poke(memAddress +448, -1);
		do Memory.poke(memAddress +480, -1);
		do Memory.poke(memAddress +512, -1);
		do Memory.poke(memAddress +544, 31);
		do Memory.poke(memAddress +576, 31);
		do Memory.poke(memAddress +608, 31);
		do Memory.poke(memAddress +640, 31);
		do Memory.poke(memAddress +672, 31);
		do Memory.poke(memAddress +704, 31);
		do Memory.poke(memAddress +736, 31);
		do Memory.poke(memAddress +768, 31);
		do Memory.poke(memAddress +800, 31);
		do Memory.poke(memAddress +832, 31);
		do Memory.poke(memAddress +864, 31);
		do Memory.poke(memAddress +896, 31);
		do Memory.poke(memAddress +928, -1);
		do Memory.poke(memAddress +960, -1);
		do Memory.poke(memAddress +992, -1);
		// column 1
		do Memory.poke(memAddress +1, 1023);
		do Memory.poke(memAddress +33, 1023);
		do Memory.poke(memAddress +65, 1023);
		do Memory.poke(memAddress +449, 127);
		do Memory.poke(memAddress +481, 127);
		do Memory.poke(memAddress +513, 127);
		do Memory.poke(memAddress +929, 1023);
		do Memory.poke(memAddress +961, 1023);
		do Memory.poke(memAddress +993, 1023);
		return;
	}

	method void drawR(int location) {
		var int memAddress; 
		let memAddress = 16384+location;
		// column 0
		do Memory.poke(memAddress, -1);
		do Memory.poke(memAddress +32, -1);
		do Memory.poke(memAddress +64, -1);
		do Memory.poke(memAddress +96, 31);
		do Memory.poke(memAddress +128, 31);
		do Memory.poke(memAddress +160, 31);
		do Memory.poke(memAddress +192, 31);
		do Memory.poke(memAddress +224, 31);
		do Memory.poke(memAddress +256, 31);
		do Memory.poke(memAddress +288, 31);
		do Memory.poke(memAddress +320, 31);
		do Memory.poke(memAddress +352, 31);
		do Memory.poke(memAddress +384, 31);
		do Memory.poke(memAddress +416, 31);
		do Memory.poke(memAddress +448, -1);
		do Memory.poke(memAddress +480, -1);
		do Memory.poke(memAddress +512, -1);
		do Memory.poke(memAddress +544, 31);
		do Memory.poke(memAddress +576, 31);
		do Memory.poke(memAddress +608, 31);
		do Memory.poke(memAddress +640, 31);
		do Memory.poke(memAddress +672, 31);
		do Memory.poke(memAddress +704, 31);
		do Memory.poke(memAddress +736, 31);
		do Memory.poke(memAddress +768, 31);
		do Memory.poke(memAddress +800, 31);
		do Memory.poke(memAddress +832, 31);
		do Memory.poke(memAddress +864, 31);
		do Memory.poke(memAddress +896, 31);
		do Memory.poke(memAddress +928, 31);
		do Memory.poke(memAddress +960, 31);
		do Memory.poke(memAddress +992, 31);
		// column 1
		do Memory.poke(memAddress +1, 1023);
		do Memory.poke(memAddress +33, 1023);
		do Memory.poke(memAddress +65, 1023);
		do Memory.poke(memAddress +97, 992);
		do Memory.poke(memAddress +129, 992);
		do Memory.poke(memAddress +161, 992);
		do Memory.poke(memAddress +193, 992);
		do Memory.poke(memAddress +225, 992);
		do Memory.poke(memAddress +257, 992);
		do Memory.poke(memAddress +289, 992);
		do Memory.poke(memAddress +321, 992);
		do Memory.poke(memAddress +353, 992);
		do Memory.poke(memAddress +385, 992);
		do Memory.poke(memAddress +417, 496);
		do Memory.poke(memAddress +449, 255);
		do Memory.poke(memAddress +481, 127);
		do Memory.poke(memAddress +513, 255);
		do Memory.poke(memAddress +545, 496);
		do Memory.poke(memAddress +577, 992);
		do Memory.poke(memAddress +609, 992);
		do Memory.poke(memAddress +641, 992);
		do Memory.poke(memAddress +673, 992);
		do Memory.poke(memAddress +705, 992);
		do Memory.poke(memAddress +737, 992);
		do Memory.poke(memAddress +769, 992);
		do Memory.poke(memAddress +801, 992);
		do Memory.poke(memAddress +833, 992);
		do Memory.poke(memAddress +865, 992);
		do Memory.poke(memAddress +897, 992);
		do Memory.poke(memAddress +929, 992);
		do Memory.poke(memAddress +961, 992);
		do Memory.poke(memAddress +993, 992);
		return;
	}

}